{"version":3,"sources":["yarn-lock/index.js"],"names":["checkExists","p","e","getLockName","str","hash","crypto","createHash","update","digest","getLockPath","model","koaServer","senecaClient","senecaServer","customerErrors","name","join","file","__dirname","isExists","lockPath"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;AAEA,eAAeA,WAAf,CAA2BC,CAA3B,EAA8B;AAC5B,MAAI;AACF,UAAM,mBAAKA,CAAL,CAAN;AACA,WAAO,IAAP;AACD,GAHD,CAIA,OAAOC,CAAP,EAAU;AACR,WAAO,KAAP;AACD;AACF;;AAED,SAASC,WAAT,CAAqBC,GAArB,EAA0B;AACxB,QAAMC,IAAI,GAAGC,gBAAOC,UAAP,CAAkB,QAAlB,CAAb;;AACAF,EAAAA,IAAI,CAACG,MAAL,CAAYJ,GAAZ;AACA,SAAOC,IAAI,CAACI,MAAL,CAAY,KAAZ,CAAP;AACD;;AAED,eAAeC,WAAf,CAA2B;AACzBC,EAAAA,KADyB;AAClBC,EAAAA,SADkB;AACPC,EAAAA,YADO;AACOC,EAAAA,YADP;AACqBC,EAAAA;AADrB,CAA3B,EAEG;AACD,MAAIC,IAAI,GAAGb,WAAW,CAAC,CAACQ,KAAD,EAAQC,SAAR,EAAmBC,YAAnB,EAAiCC,YAAjC,EAA+CC,cAA/C,EAA+DE,IAA/D,CAAoE,GAApE,CAAD,CAAtB;AACA,MAAIC,IAAI,GAAG,mBAAYC,SAAZ,EAAuBH,IAAvB,CAAX;AACA,MAAII,QAAQ,GAAG,MAAMpB,WAAW,CAACkB,IAAD,CAAhC;AAEA,SAAO;AACLG,IAAAA,QAAQ,EAAEH,IADL;AAELE,IAAAA;AAFK,GAAP;AAID;;eAGcV,W","sourcesContent":["import crypto from 'crypto';\nimport { stat } from 'fs-extra';\nimport { resolve as pathResolve } from 'path';\n\nasync function checkExists(p) {\n  try {\n    await stat(p);\n    return true;\n  }\n  catch (e) {\n    return false;\n  }\n}\n\nfunction getLockName(str) {\n  const hash = crypto.createHash('sha256');\n  hash.update(str);\n  return hash.digest('hex');\n}\n\nasync function getLockPath({\n  model, koaServer, senecaClient, senecaServer, customerErrors,\n}) {\n  let name = getLockName([model, koaServer, senecaClient, senecaServer, customerErrors].join('|'));\n  let file = pathResolve(__dirname, name);\n  let isExists = await checkExists(file);\n\n  return {\n    lockPath: file,\n    isExists,\n  };\n}\n\nexport { getLockName, getLockPath };\nexport default getLockPath;\n"],"file":"index.js"}