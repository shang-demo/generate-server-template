{"version":3,"sources":["generate-lock.js"],"names":["templateDir","process","env","TEMPLATE_DIR","console","info","options","koaServer","senecaClient","senecaServer","model","Promise","mapSeries","option","tempDir","targetDir","Object","keys","join","builder","Builder","assign","disableLock","lockPath","isExists","run","catch","e","warn","exit"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,YAAhC;AACAC,OAAO,CAACC,IAAR,CAAa,eAAb,EAA8BL,WAA9B;AAEA,IAAIM,OAAO,GAAG,CACZ;AAAEC,EAAAA,SAAS,EAAE;AAAb,CADY,EAEZ;AAAEA,EAAAA,SAAS,EAAE,IAAb;AAAmBC,EAAAA,YAAY,EAAE;AAAjC,CAFY,EAGZ;AAAEC,EAAAA,YAAY,EAAE;AAAhB,CAHY,EAIZ;AAAEA,EAAAA,YAAY,EAAE,IAAhB;AAAsBD,EAAAA,YAAY,EAAE;AAApC,CAJY,EAKZ;AAAED,EAAAA,SAAS,EAAE,IAAb;AAAmBG,EAAAA,KAAK,EAAE;AAA1B,CALY,EAMZ;AAAEH,EAAAA,SAAS,EAAE,IAAb;AAAmBC,EAAAA,YAAY,EAAE,IAAjC;AAAuCE,EAAAA,KAAK,EAAE;AAA9C,CANY,EAOZ;AAAED,EAAAA,YAAY,EAAE,IAAhB;AAAsBC,EAAAA,KAAK,EAAE;AAA7B,CAPY,EAQZ;AAAED,EAAAA,YAAY,EAAE,IAAhB;AAAsBD,EAAAA,YAAY,EAAE,IAApC;AAA0CE,EAAAA,KAAK,EAAE;AAAjD,CARY,CAAd;;AAWAC,kBAAQC,SAAR,CAAkBN,OAAlB,EAA2B,MAAOO,MAAP,IAAkB;AAC3C,MAAIC,OAAO,GAAG,mBAAYd,WAAZ,EAAyB,KAAzB,CAAd;AACA,MAAIe,SAAS,GAAG,mBAAYD,OAAZ,EAAqBE,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoBK,IAApB,CAAyB,GAAzB,CAArB,CAAhB;AAEAd,EAAAA,OAAO,CAACC,IAAR,CAAa,UAAb,EAAyBQ,MAAzB;AACA,QAAMM,OAAO,GAAG,IAAIC,gBAAJ,CAAYJ,MAAM,CAACK,MAAP,CAAcR,MAAd,EAAsB;AAChDb,IAAAA,WADgD;AAEhDe,IAAAA,SAFgD;AAGhDO,IAAAA,WAAW,EAAE;AAHmC,GAAtB,CAAZ,CAAhB;AAMA,QAAM,gBAAM,UAASP,SAAU,EAAzB,CAAN;AACA,MAAI;AAAEQ,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAyB,MAAM,wBAAYX,MAAZ,CAAnC;;AACA,MAAIW,QAAJ,EAAc;AACZ,UAAM,gBAAM,UAASD,QAAS,EAAxB,CAAN;AACD;;AAED,QAAMJ,OAAO,CAACM,GAAR,EAAN;AACArB,EAAAA,OAAO,CAACC,IAAR,CAAc,GAAEU,SAAU,gBAA1B;AACA,QAAM,gBAAM,MAAK,mBAAYA,SAAZ,EAAuB,WAAvB,CAAoC,IAAGQ,QAAS,EAA3D,CAAN;AACA,QAAM,gBAAM,UAASR,SAAU,EAAzB,CAAN;AACD,CArBD,EAqBGW,KArBH,CAqBUC,CAAD,IAAO;AACdvB,EAAAA,OAAO,CAACwB,IAAR,CAAaD,CAAb;AACA1B,EAAAA,OAAO,CAAC4B,IAAR,CAAa,CAAb;AACD,CAxBD","sourcesContent":["import Promise from 'bluebird';\nimport { resolve as pathResolve } from 'path';\nimport { exec } from './util';\nimport { getLockPath } from './yarn-lock/index';\n\nimport Builder from './Builder';\n\nconst templateDir = process.env.TEMPLATE_DIR;\nconsole.info('templateDir: ', templateDir);\n\nlet options = [\n  { koaServer: true },\n  { koaServer: true, senecaClient: true },\n  { senecaServer: true },\n  { senecaServer: true, senecaClient: true },\n  { koaServer: true, model: true },\n  { koaServer: true, senecaClient: true, model: true },\n  { senecaServer: true, model: true },\n  { senecaServer: true, senecaClient: true, model: true },\n];\n\nPromise.mapSeries(options, async (option) => {\n  let tempDir = pathResolve(templateDir, '../');\n  let targetDir = pathResolve(tempDir, Object.keys(option).join('-'));\n\n  console.info('option: ', option);\n  const builder = new Builder(Object.assign(option, {\n    templateDir,\n    targetDir,\n    disableLock: true,\n  }));\n\n  await exec(`rm -rf ${targetDir}`);\n  let { lockPath, isExists } = await getLockPath(option);\n  if (isExists) {\n    await exec(`rm -rf ${lockPath}`);\n  }\n\n  await builder.run();\n  console.info(`${targetDir} build success`);\n  await exec(`cp ${pathResolve(targetDir, 'yarn.lock')} ${lockPath}`);\n  await exec(`rm -rf ${targetDir}`);\n}).catch((e) => {\n  console.warn(e);\n  process.exit(1);\n});\n"],"file":"generate-lock.js"}