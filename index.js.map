{"version":3,"sources":["index.js"],"names":["parseArgv","targetDir","program","version","arguments","option","action","target","parse","process","argv","model","koaServer","socketIO","senecaClient","senecaServer","customerErrors","templateDir","setTemplateDir","yj","si","gsConfig","JSON","stringify","e","message","exit","test","cwd","targetDirIsExists","confirm","type","name","default","info","skipInstall","Object","keys","forEach","key","result","builder","Builder","run"],"mappings":"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","sourcesContent":["import program from 'commander';\nimport { stat } from 'fs-extra';\nimport { resolve as pathResolve } from 'path';\nimport { prompt } from 'inquirer';\n\nimport { colorEcho } from './util';\nimport { getConfig, setConfig } from './user-data';\nimport Builder from './Builder';\n\nasync function parseArgv() {\n  let targetDir;\n\n  program\n    .version('0.0.1', '-v, --version')\n    .arguments('<target>')\n    .option('--setTemplateDir <set template dir>', 'set template dir persistence')\n    .option('-t --templateDir <template dir>', 'set template dir')\n    .option('-k --koaServer', 'add koa server')\n    .option('-i --socketIO', 'add socket io server')\n    .option('-c --senecaClient', 'add seneca client')\n    .option('-s --senecaServer', 'add seneca server')\n    .option('-m --model', 'add model')\n    .option('-e --customerErrors <error-package>', 'add customer errors package')\n    .option('--yj <cloudnapps-template-dir>', 'build for cloudnapps')\n    .option('--si', 'skip yarn install')\n    .action((target) => {\n      targetDir = target;\n    })\n    .parse(process.argv);\n\n  let {\n    model,\n    koaServer,\n    socketIO,\n    senecaClient,\n    senecaServer,\n    customerErrors,\n    templateDir,\n    setTemplateDir,\n    yj,\n    si,\n  } = program;\n\n  if (setTemplateDir) {\n    try {\n      let gsConfig = await setConfig({ templateDir: setTemplateDir });\n      colorEcho(JSON.stringify(gsConfig));\n    }\n    catch (e) {\n      colorEcho(e.message);\n      process.exit(1);\n    }\n    process.exit(0);\n  }\n\n  if (!templateDir) {\n    ({ templateDir } = await getConfig());\n  }\n\n  if (!templateDir) {\n    colorEcho(' gs -t <use templateDir> or gs --setTemplateDir <set template dir>');\n    process.exit(1);\n  }\n\n  // must be a type to generate\n  if (!koaServer && !senecaClient && !senecaServer) {\n    koaServer = true;\n  }\n\n  // socketIO must with koaServer\n  if (socketIO && !koaServer) {\n    colorEcho('socketIo need koaServer; `gs -ki`');\n    process.exit(1);\n  }\n\n  if (koaServer && senecaServer) {\n    colorEcho('koa server or seneca server should be only');\n    process.exit(1);\n  }\n\n  // resolve target dir\n  if (!targetDir) {\n    colorEcho('no target dir given!');\n    process.exit(1);\n  }\n  else if (!/^\\//.test(targetDir)) {\n    targetDir = pathResolve(process.cwd(), targetDir);\n  }\n\n  let targetDirIsExists = false;\n  try {\n    await stat(targetDir);\n    targetDirIsExists = true;\n  }\n  catch (e) {\n    targetDirIsExists = false;\n  }\n\n  if (targetDirIsExists) {\n    let { confirm } = await prompt({\n      type: 'confirm',\n      name: 'confirm',\n      message: `${targetDir} is exists, cover it?`,\n      default: false,\n    });\n\n    if (!confirm) {\n      colorEcho(`${targetDir} exists`);\n      process.exit(1);\n    }\n  }\n\n  let info = {\n    targetDir,\n    templateDir,\n    model,\n    koaServer,\n    socketIO,\n    senecaClient,\n    senecaServer,\n    customerErrors,\n    yj,\n    skipInstall: si,\n  };\n\n  let message = '';\n  Object.keys(info).forEach((key) => {\n    if (info[key]) {\n      message = `${message}${key}: ${info[key]}\\n  `;\n    }\n  });\n\n  if (info.yj) {\n    info.skipInstall = true;\n  }\n\n  let { confirm } = await prompt({\n    type: 'confirm',\n    name: 'confirm',\n    message,\n    default: true,\n  });\n\n  if (!confirm) {\n    process.exit(1);\n  }\n\n  return info;\n}\n\n(async () => {\n  let result = await parseArgv();\n  let builder = new Builder(result);\n  await builder.run();\n})();\n"],"file":"index.js"}