{"version":3,"sources":["index.js"],"names":["parseArgv","targetDir","program","version","arguments","option","action","target","parse","process","argv","koaServer","senecaClient","senecaServer","exit","test","cwd","targetDirIsExists","e","confirm","type","name","message","default","info","dir","model","customerErrors","Object","keys","forEach","key","arr","ensureTargetDir","cpBase","buildComponents","buildConfigFile","buildIndexJs","buildPackage","Promise","each","fun"],"mappings":"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","sourcesContent":["import Promise from 'bluebird';\nimport program from 'commander';\nimport { stat } from 'fs-extra';\nimport { resolve as pathResolve } from 'path';\nimport { prompt } from 'inquirer';\n\nimport { colorEcho } from './util';\nimport {\n  ensureTargetDir,\n  cpBase,\n  buildComponents,\n  buildConfigFile,\n  buildIndexJs,\n  buildPackage,\n} from './build';\n\nasync function parseArgv() {\n  let targetDir;\n\n  program\n    .version('0.0.1', '-v, --version')\n    .arguments('<target>')\n    .option('-k --koaServer', 'add koa server')\n    .option('-c --senecaClient', 'add seneca client')\n    .option('-s --senecaServer', 'add seneca server')\n    .option('-m --model', 'add model')\n    .option('-e --customerErrors <error-package>', 'add customer errors package')\n    .action((target) => {\n      targetDir = target;\n    })\n    .parse(process.argv);\n\n  // must be a type to generate\n  if (!program.koaServer && !program.senecaClient && !program.senecaServer) {\n    program.koaServer = true;\n  }\n\n  if (program.koaServer && program.senecaServer) {\n    colorEcho('koa server or seneca server should be only');\n    process.exit(1);\n  }\n\n  // resolve target dir\n  if (!targetDir) {\n    colorEcho('no target dir given!');\n    process.exit(1);\n  }\n  else if (!/^\\//.test(targetDir)) {\n    targetDir = pathResolve(process.cwd(), targetDir);\n  }\n\n  let targetDirIsExists = false;\n  try {\n    await stat(targetDir);\n    targetDirIsExists = true;\n  }\n  catch (e) {\n    targetDirIsExists = false;\n  }\n\n  if (targetDirIsExists) {\n    let { confirm } = await prompt({\n      type: 'confirm',\n      name: 'confirm',\n      message: `${targetDir} is exists, cover it?`,\n      default: false,\n    });\n\n    if (!confirm) {\n      colorEcho(`${targetDir} exists`);\n      process.exit(1);\n    }\n  }\n\n  let info = {\n    dir: targetDir,\n    model: program.model,\n    koaServer: program.koaServer,\n    senecaClient: program.senecaClient,\n    senecaServer: program.senecaServer,\n    customerErrors: program.customerErrors,\n  };\n\n  let message = '';\n  Object.keys(info).forEach((key) => {\n    if (info[key]) {\n      message = `${message}${key}: ${info[key]}\\n  `;\n    }\n  });\n\n  let { confirm } = await prompt({\n    type: 'confirm',\n    name: 'confirm',\n    message,\n    default: true,\n  });\n\n  if (!confirm) {\n    process.exit(1);\n  }\n\n  return targetDir;\n}\n\n(async () => {\n  let targetDir = await parseArgv();\n\n  let arr = [ensureTargetDir, cpBase, buildComponents, buildConfigFile, buildIndexJs, buildPackage];\n\n  let {\n    model, koaServer, senecaClient, senecaServer, customerErrors,\n  } = program;\n\n  await Promise.each(arr, (fun) => {\n    return fun(targetDir, {\n      model,\n      koaServer,\n      senecaClient,\n      senecaServer,\n      customerErrors,\n    });\n  });\n})();\n"],"file":"index.js"}